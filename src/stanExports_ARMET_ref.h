// Generated by rstantools.  Do not edit by hand.

/*
    cellsig is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    cellsig is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with cellsig.  If not, see <http://www.gnu.org/licenses/>.
*/
#ifndef MODELS_HPP
#define MODELS_HPP
#define STAN__SERVICES__COMMAND_HPP
#include <rstan/rstaninc.hpp>
// Code generated by Stan version 2.19.1
#include <stan/model/model_header.hpp>
namespace model_ARMET_ref_namespace {
using std::istream;
using std::string;
using std::stringstream;
using std::vector;
using stan::io::dump;
using stan::math::lgamma;
using stan::model::prob_grad;
using namespace stan::math;
static int current_statement_begin__;
stan::io::program_reader prog_reader__() {
    stan::io::program_reader reader;
    reader.add_event(0, 0, "start", "model_ARMET_ref");
    reader.add_event(265, 263, "end", "model_ARMET_ref");
    return reader;
}
std::vector<int>
rep_int(const int& x,
            const int& n, std::ostream* pstream__) {
    typedef double local_scalar_t__;
    typedef int fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 4;
        validate_non_negative_index("out_int", "n", n);
        std::vector<int  > out_int(n, int(0));
        stan::math::fill(out_int, std::numeric_limits<int>::min());
        current_statement_begin__ = 6;
        for (int i = 1; i <= n; ++i) {
            current_statement_begin__ = 6;
            stan::model::assign(out_int, 
                        stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                        x, 
                        "assigning variable out_int");
        }
        current_statement_begin__ = 8;
        return stan::math::promote_scalar<fun_return_scalar_t__>(out_int);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}
struct rep_int_functor__ {
            std::vector<int>
    operator()(const int& x,
            const int& n, std::ostream* pstream__) const {
        return rep_int(x, n, pstream__);
    }
};
template <typename T0__>
std::vector<typename boost::math::tools::promote_args<T0__>::type>
concatenate_real_array(const std::vector<std::vector<T0__> >& elems, std::ostream* pstream__);
template <typename T0__>
std::vector<typename boost::math::tools::promote_args<T0__>::type>
concatenate_real_array(const std::vector<std::vector<T0__> >& elems, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 15;
        int num_elems(0);
        (void) num_elems;  // dummy to suppress unused var warning
        stan::math::fill(num_elems, std::numeric_limits<int>::min());
        stan::math::assign(num_elems,size(elems));
        current_statement_begin__ = 17;
        if (as_bool(logical_eq(num_elems, 1))) {
            current_statement_begin__ = 18;
            return stan::math::promote_scalar<fun_return_scalar_t__>(get_base1(elems, 1, "elems", 1));
        }
        current_statement_begin__ = 20;
        if (as_bool(logical_eq(num_elems, 2))) {
            current_statement_begin__ = 21;
            return stan::math::promote_scalar<fun_return_scalar_t__>(to_array_1d(append_row(to_vector(get_base1(elems, 1, "elems", 1)), to_vector(get_base1(elems, 2, "elems", 1)))));
        }
        current_statement_begin__ = 24;
        return stan::math::promote_scalar<fun_return_scalar_t__>(to_array_1d(append_row(to_vector(get_base1(elems, 1, "elems", 1)), to_vector(concatenate_real_array(stan::model::rvalue(elems, stan::model::cons_list(stan::model::index_min_max(2, num_elems), stan::model::nil_index_list()), "elems"), pstream__)))));
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}
struct concatenate_real_array_functor__ {
    template <typename T0__>
        std::vector<typename boost::math::tools::promote_args<T0__>::type>
    operator()(const std::vector<std::vector<T0__> >& elems, std::ostream* pstream__) const {
        return concatenate_real_array(elems, pstream__);
    }
};
template <typename T0__>
Eigen::Matrix<typename boost::math::tools::promote_args<T0__>::type, Eigen::Dynamic, 1>
concatenate_vector_array(const std::vector<Eigen::Matrix<T0__, Eigen::Dynamic, 1> >& elems, std::ostream* pstream__);
template <typename T0__>
Eigen::Matrix<typename boost::math::tools::promote_args<T0__>::type, Eigen::Dynamic, 1>
concatenate_vector_array(const std::vector<Eigen::Matrix<T0__, Eigen::Dynamic, 1> >& elems, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 31;
        int num_elems(0);
        (void) num_elems;  // dummy to suppress unused var warning
        stan::math::fill(num_elems, std::numeric_limits<int>::min());
        stan::math::assign(num_elems,size(elems));
        current_statement_begin__ = 33;
        if (as_bool(logical_eq(num_elems, 1))) {
            current_statement_begin__ = 33;
            return stan::math::promote_scalar<fun_return_scalar_t__>(get_base1(elems, 1, "elems", 1));
        }
        current_statement_begin__ = 35;
        if (as_bool(logical_eq(num_elems, 2))) {
            current_statement_begin__ = 35;
            return stan::math::promote_scalar<fun_return_scalar_t__>(append_row(get_base1(elems, 1, "elems", 1), get_base1(elems, 2, "elems", 1)));
        }
        current_statement_begin__ = 38;
        return stan::math::promote_scalar<fun_return_scalar_t__>(append_row(get_base1(elems, 1, "elems", 1), concatenate_vector_array(stan::model::rvalue(elems, stan::model::cons_list(stan::model::index_min_max(2, num_elems), stan::model::nil_index_list()), "elems"), pstream__)));
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}
struct concatenate_vector_array_functor__ {
    template <typename T0__>
        Eigen::Matrix<typename boost::math::tools::promote_args<T0__>::type, Eigen::Dynamic, 1>
    operator()(const std::vector<Eigen::Matrix<T0__, Eigen::Dynamic, 1> >& elems, std::ostream* pstream__) const {
        return concatenate_vector_array(elems, pstream__);
    }
};
std::vector<int>
append_int(const std::vector<int>& i1,
               const std::vector<int>& i2, std::ostream* pstream__) {
    typedef double local_scalar_t__;
    typedef int fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 42;
        validate_non_negative_index("i3", "(size(i1) + size(i2))", (size(i1) + size(i2)));
        std::vector<int  > i3((size(i1) + size(i2)), int(0));
        stan::math::fill(i3, std::numeric_limits<int>::min());
        current_statement_begin__ = 44;
        stan::model::assign(i3, 
                    stan::model::cons_list(stan::model::index_min_max(1, size(i1)), stan::model::nil_index_list()), 
                    i1, 
                    "assigning variable i3");
        current_statement_begin__ = 45;
        stan::model::assign(i3, 
                    stan::model::cons_list(stan::model::index_min_max((size(i1) + 1), (size(i1) + size(i2))), stan::model::nil_index_list()), 
                    i2, 
                    "assigning variable i3");
        current_statement_begin__ = 47;
        return stan::math::promote_scalar<fun_return_scalar_t__>(i3);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}
struct append_int_functor__ {
            std::vector<int>
    operator()(const std::vector<int>& i1,
               const std::vector<int>& i2, std::ostream* pstream__) const {
        return append_int(i1, i2, pstream__);
    }
};
std::vector<int>
concatenate_int_array(const std::vector<std::vector<int> >& elems, std::ostream* pstream__);
std::vector<int>
concatenate_int_array(const std::vector<std::vector<int> >& elems, std::ostream* pstream__) {
    typedef double local_scalar_t__;
    typedef int fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 54;
        int num_elems(0);
        (void) num_elems;  // dummy to suppress unused var warning
        stan::math::fill(num_elems, std::numeric_limits<int>::min());
        stan::math::assign(num_elems,size(elems));
        current_statement_begin__ = 56;
        if (as_bool(logical_eq(num_elems, 1))) {
            current_statement_begin__ = 56;
            return stan::math::promote_scalar<fun_return_scalar_t__>(get_base1(elems, 1, "elems", 1));
        }
        current_statement_begin__ = 58;
        if (as_bool(logical_eq(num_elems, 2))) {
            current_statement_begin__ = 58;
            return stan::math::promote_scalar<fun_return_scalar_t__>(append_int(get_base1(elems, 1, "elems", 1), get_base1(elems, 2, "elems", 1), pstream__));
        }
        current_statement_begin__ = 61;
        return stan::math::promote_scalar<fun_return_scalar_t__>(append_int(get_base1(elems, 1, "elems", 1), concatenate_int_array(stan::model::rvalue(elems, stan::model::cons_list(stan::model::index_min_max(2, num_elems), stan::model::nil_index_list()), "elems"), pstream__), pstream__));
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}
struct concatenate_int_array_functor__ {
            std::vector<int>
    operator()(const std::vector<std::vector<int> >& elems, std::ostream* pstream__) const {
        return concatenate_int_array(elems, pstream__);
    }
};
template <typename T0__, typename T1__>
int
get_real_buffer_size(const Eigen::Matrix<T0__, Eigen::Dynamic, 1>& v,
                         const T1__& threshold, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T1__>::type local_scalar_t__;
    typedef int fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 67;
        local_scalar_t__ i(DUMMY_VAR__);
        (void) i;  // dummy to suppress unused var warning
        stan::math::initialize(i, DUMMY_VAR__);
        stan::math::fill(i, DUMMY_VAR__);
        stan::math::assign(i,threshold);
        current_statement_begin__ = 68;
        int n(0);
        (void) n;  // dummy to suppress unused var warning
        stan::math::fill(n, std::numeric_limits<int>::min());
        stan::math::assign(n,0);
        current_statement_begin__ = 69;
        int s(0);
        (void) s;  // dummy to suppress unused var warning
        stan::math::fill(s, std::numeric_limits<int>::min());
        stan::math::assign(s,rows(v));
        current_statement_begin__ = 71;
        while (as_bool(logical_eq(i, threshold))) {
            current_statement_begin__ = 72;
            stan::math::assign(i, get_base1(v, (s - n), "v", 1));
            current_statement_begin__ = 73;
            if (as_bool(logical_eq(i, threshold))) {
                current_statement_begin__ = 73;
                stan::math::assign(n, (n + 1));
            }
        }
        current_statement_begin__ = 76;
        return stan::math::promote_scalar<fun_return_scalar_t__>(n);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}
struct get_real_buffer_size_functor__ {
    template <typename T0__, typename T1__>
        int
    operator()(const Eigen::Matrix<T0__, Eigen::Dynamic, 1>& v,
                         const T1__& threshold, std::ostream* pstream__) const {
        return get_real_buffer_size(v, threshold, pstream__);
    }
};
std::vector<int>
get_elements_per_shard(const int& lenth_v,
                           const int& shards, std::ostream* pstream__) {
    typedef double local_scalar_t__;
    typedef int fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 82;
        int tentative_size(0);
        (void) tentative_size;  // dummy to suppress unused var warning
        stan::math::fill(tentative_size, std::numeric_limits<int>::min());
        stan::math::assign(tentative_size,divide(lenth_v, shards));
        current_statement_begin__ = 83;
        int tentative_remaining(0);
        (void) tentative_remaining;  // dummy to suppress unused var warning
        stan::math::fill(tentative_remaining, std::numeric_limits<int>::min());
        stan::math::assign(tentative_remaining,(lenth_v - (tentative_size * shards)));
        current_statement_begin__ = 84;
        int elements_per_shard(0);
        (void) elements_per_shard;  // dummy to suppress unused var warning
        stan::math::fill(elements_per_shard, std::numeric_limits<int>::min());
        stan::math::assign(elements_per_shard,(logical_gt(tentative_remaining, 0) ? (tentative_size + 1) : tentative_size ));
        current_statement_begin__ = 85;
        int remaining(0);
        (void) remaining;  // dummy to suppress unused var warning
        stan::math::fill(remaining, std::numeric_limits<int>::min());
        stan::math::assign(remaining,((elements_per_shard * shards) - lenth_v));
        current_statement_begin__ = 87;
        validate_non_negative_index("length_obj", "shards", shards);
        std::vector<int  > length_obj(shards, int(0));
        stan::math::fill(length_obj, std::numeric_limits<int>::min());
        current_statement_begin__ = 89;
        for (int s = 1; s <= shards; ++s) {
            current_statement_begin__ = 90;
            stan::model::assign(length_obj, 
                        stan::model::cons_list(stan::model::index_uni(s), stan::model::nil_index_list()), 
                        (logical_neq(s, shards) ? elements_per_shard : (elements_per_shard - remaining) ), 
                        "assigning variable length_obj");
        }
        current_statement_begin__ = 96;
        return stan::math::promote_scalar<fun_return_scalar_t__>(length_obj);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}
struct get_elements_per_shard_functor__ {
            std::vector<int>
    operator()(const int& lenth_v,
                           const int& shards, std::ostream* pstream__) const {
        return get_elements_per_shard(lenth_v, shards, pstream__);
    }
};
std::vector<std::vector<int> >
get_int_MPI(const std::vector<int>& v,
                const int& shards, std::ostream* pstream__) {
    typedef double local_scalar_t__;
    typedef int fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 103;
        validate_non_negative_index("elements_per_shard", "shards", shards);
        std::vector<int  > elements_per_shard(shards, int(0));
        stan::math::fill(elements_per_shard, std::numeric_limits<int>::min());
        stan::math::assign(elements_per_shard,get_elements_per_shard(size(v), shards, pstream__));
        current_statement_begin__ = 104;
        int size_MPI_obj(0);
        (void) size_MPI_obj;  // dummy to suppress unused var warning
        stan::math::fill(size_MPI_obj, std::numeric_limits<int>::min());
        stan::math::assign(size_MPI_obj,get_base1(elements_per_shard, 1, "elements_per_shard", 1));
        current_statement_begin__ = 105;
        validate_non_negative_index("v_MPI", "shards", shards);
        validate_non_negative_index("v_MPI", "size_MPI_obj", size_MPI_obj);
        std::vector<std::vector<int  >  > v_MPI(shards, std::vector<int>(size_MPI_obj, int(0)));
        stan::math::fill(v_MPI, std::numeric_limits<int>::min());
        stan::math::assign(v_MPI,rep_array(-(1), shards, size_MPI_obj));
        current_statement_begin__ = 107;
        int i(0);
        (void) i;  // dummy to suppress unused var warning
        stan::math::fill(i, std::numeric_limits<int>::min());
        stan::math::assign(i,0);
        current_statement_begin__ = 109;
        for (int s = 1; s <= shards; ++s) {
            current_statement_begin__ = 110;
            stan::model::assign(v_MPI, 
                        stan::model::cons_list(stan::model::index_uni(s), stan::model::cons_list(stan::model::index_min_max(1, get_base1(elements_per_shard, s, "elements_per_shard", 1)), stan::model::nil_index_list())), 
                        stan::model::rvalue(v, stan::model::cons_list(stan::model::index_min_max((i + 1), (i + get_base1(elements_per_shard, s, "elements_per_shard", 1))), stan::model::nil_index_list()), "v"), 
                        "assigning variable v_MPI");
            current_statement_begin__ = 111;
            stan::math::assign(i, (i + get_base1(elements_per_shard, s, "elements_per_shard", 1)));
        }
        current_statement_begin__ = 114;
        return stan::math::promote_scalar<fun_return_scalar_t__>(v_MPI);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}
struct get_int_MPI_functor__ {
            std::vector<std::vector<int> >
    operator()(const std::vector<int>& v,
                const int& shards, std::ostream* pstream__) const {
        return get_int_MPI(v, shards, pstream__);
    }
};
template <typename T0__, typename T1__>
std::vector<Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T1__>::type, Eigen::Dynamic, 1> >
get_mu_sigma_vector_MPI(const Eigen::Matrix<T0__, Eigen::Dynamic, 1>& mus,
                            const Eigen::Matrix<T1__, Eigen::Dynamic, 1>& sigmas,
                            const int& shards, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T1__>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 119;
        validate_non_negative_index("elements_per_shard", "shards", shards);
        std::vector<int  > elements_per_shard(shards, int(0));
        stan::math::fill(elements_per_shard, std::numeric_limits<int>::min());
        stan::math::assign(elements_per_shard,get_elements_per_shard(rows(mus), shards, pstream__));
        current_statement_begin__ = 120;
        int size_MPI_obj(0);
        (void) size_MPI_obj;  // dummy to suppress unused var warning
        stan::math::fill(size_MPI_obj, std::numeric_limits<int>::min());
        stan::math::assign(size_MPI_obj,get_base1(elements_per_shard, 1, "elements_per_shard", 1));
        current_statement_begin__ = 121;
        validate_non_negative_index("v_MPI", "(size_MPI_obj * 2)", (size_MPI_obj * 2));
        validate_non_negative_index("v_MPI", "shards", shards);
        std::vector<Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1>  > v_MPI(shards, Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1>((size_MPI_obj * 2)));
        stan::math::initialize(v_MPI, DUMMY_VAR__);
        stan::math::fill(v_MPI, DUMMY_VAR__);
        current_statement_begin__ = 123;
        int i(0);
        (void) i;  // dummy to suppress unused var warning
        stan::math::fill(i, std::numeric_limits<int>::min());
        stan::math::assign(i,0);
        current_statement_begin__ = 125;
        for (int s = 1; s <= shards; ++s) {
            current_statement_begin__ = 128;
            if (as_bool(logical_eq(s, shards))) {
                current_statement_begin__ = 128;
                stan::model::assign(v_MPI, 
                            stan::model::cons_list(stan::model::index_uni(s), stan::model::nil_index_list()), 
                            rep_vector(-(999.0), (size_MPI_obj * 2)), 
                            "assigning variable v_MPI");
            }
            current_statement_begin__ = 130;
            stan::model::assign(v_MPI, 
                        stan::model::cons_list(stan::model::index_uni(s), stan::model::cons_list(stan::model::index_min_max(1, get_base1(elements_per_shard, s, "elements_per_shard", 1)), stan::model::nil_index_list())), 
                        stan::model::rvalue(mus, stan::model::cons_list(stan::model::index_min_max((i + 1), (i + get_base1(elements_per_shard, s, "elements_per_shard", 1))), stan::model::nil_index_list()), "mus"), 
                        "assigning variable v_MPI");
            current_statement_begin__ = 131;
            stan::model::assign(v_MPI, 
                        stan::model::cons_list(stan::model::index_uni(s), stan::model::cons_list(stan::model::index_min_max((get_base1(elements_per_shard, s, "elements_per_shard", 1) + 1), (get_base1(elements_per_shard, s, "elements_per_shard", 1) + get_base1(elements_per_shard, s, "elements_per_shard", 1))), stan::model::nil_index_list())), 
                        stan::model::rvalue(sigmas, stan::model::cons_list(stan::model::index_min_max((i + 1), (i + get_base1(elements_per_shard, s, "elements_per_shard", 1))), stan::model::nil_index_list()), "sigmas"), 
                        "assigning variable v_MPI");
            current_statement_begin__ = 133;
            stan::math::assign(i, (i + get_base1(elements_per_shard, s, "elements_per_shard", 1)));
        }
        current_statement_begin__ = 136;
        return stan::math::promote_scalar<fun_return_scalar_t__>(v_MPI);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}
struct get_mu_sigma_vector_MPI_functor__ {
    template <typename T0__, typename T1__>
        std::vector<Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T1__>::type, Eigen::Dynamic, 1> >
    operator()(const Eigen::Matrix<T0__, Eigen::Dynamic, 1>& mus,
                            const Eigen::Matrix<T1__, Eigen::Dynamic, 1>& sigmas,
                            const int& shards, std::ostream* pstream__) const {
        return get_mu_sigma_vector_MPI(mus, sigmas, shards, pstream__);
    }
};
template <typename T0__, typename T1__, typename T2__>
Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T1__, T2__>::type, Eigen::Dynamic, 1>
lp_reduce_simple(const Eigen::Matrix<T0__, Eigen::Dynamic, 1>& global_parameters,
                     const Eigen::Matrix<T1__, Eigen::Dynamic, 1>& mus_sigmas,
                     const std::vector<T2__>& real_data,
                     const std::vector<int>& int_data, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T1__, T2__>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 141;
        local_scalar_t__ lp(DUMMY_VAR__);
        (void) lp;  // dummy to suppress unused var warning
        stan::math::initialize(lp, DUMMY_VAR__);
        stan::math::fill(lp, DUMMY_VAR__);
        current_statement_begin__ = 142;
        local_scalar_t__ threshold(DUMMY_VAR__);
        (void) threshold;  // dummy to suppress unused var warning
        stan::math::initialize(threshold, DUMMY_VAR__);
        stan::math::fill(threshold, DUMMY_VAR__);
        stan::math::assign(threshold,-(999));
        current_statement_begin__ = 143;
        int size_buffer(0);
        (void) size_buffer;  // dummy to suppress unused var warning
        stan::math::fill(size_buffer, std::numeric_limits<int>::min());
        stan::math::assign(size_buffer,get_real_buffer_size(mus_sigmas, threshold, pstream__));
        current_statement_begin__ = 144;
        int size_vector(0);
        (void) size_vector;  // dummy to suppress unused var warning
        stan::math::fill(size_vector, std::numeric_limits<int>::min());
        stan::math::assign(size_vector,divide((rows(mus_sigmas) - size_buffer), 2));
        current_statement_begin__ = 146;
        if (as_bool(logical_eq(min(stan::model::rvalue(mus_sigmas, stan::model::cons_list(stan::model::index_min_max(1, (size_vector * 2)), stan::model::nil_index_list()), "mus_sigmas")), threshold))) {
            current_statement_begin__ = 146;
            if (pstream__) {
                stan_print(pstream__,"ERROR! The MPI implmentation is buggy");
                *pstream__ << std::endl;
            }
        }
        current_statement_begin__ = 149;
        stan::math::assign(lp, neg_binomial_2_log_log(stan::model::rvalue(int_data, stan::model::cons_list(stan::model::index_min_max(1, size_vector), stan::model::nil_index_list()), "int_data"), stan::model::rvalue(mus_sigmas, stan::model::cons_list(stan::model::index_min_max(1, size_vector), stan::model::nil_index_list()), "mus_sigmas"), elt_divide(1.0, stan::math::exp(stan::model::rvalue(mus_sigmas, stan::model::cons_list(stan::model::index_min_max((size_vector + 1), (size_vector + size_vector)), stan::model::nil_index_list()), "mus_sigmas")))));
        current_statement_begin__ = 155;
        return stan::math::promote_scalar<fun_return_scalar_t__>(transpose(stan::math::to_row_vector(stan::math::array_builder<local_scalar_t__ >().add(lp).array())));
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}
struct lp_reduce_simple_functor__ {
    template <typename T0__, typename T1__, typename T2__>
        Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T1__, T2__>::type, Eigen::Dynamic, 1>
    operator()(const Eigen::Matrix<T0__, Eigen::Dynamic, 1>& global_parameters,
                     const Eigen::Matrix<T1__, Eigen::Dynamic, 1>& mus_sigmas,
                     const std::vector<T2__>& real_data,
                     const std::vector<int>& int_data, std::ostream* pstream__) const {
        return lp_reduce_simple(global_parameters, mus_sigmas, real_data, int_data, pstream__);
    }
};
template <typename T1__, typename T2__, typename T3__, typename T4__>
std::vector<Eigen::Matrix<typename boost::math::tools::promote_args<T1__, T2__, T3__, T4__>::type, Eigen::Dynamic, 1> >
which(const int& x,
          const std::vector<Eigen::Matrix<T1__, Eigen::Dynamic, 1> >& a,
          const std::vector<Eigen::Matrix<T2__, Eigen::Dynamic, 1> >& b,
          const std::vector<Eigen::Matrix<T3__, Eigen::Dynamic, 1> >& c,
          const std::vector<Eigen::Matrix<T4__, Eigen::Dynamic, 1> >& d, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T1__, T2__, T3__, T4__>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
    int current_statement_begin__ = -1;
    try {
        current_statement_begin__ = 160;
        if (as_bool(logical_eq(x, 1))) {
            current_statement_begin__ = 160;
            return stan::math::promote_scalar<fun_return_scalar_t__>(a);
        }
        current_statement_begin__ = 161;
        if (as_bool(logical_eq(x, 2))) {
            current_statement_begin__ = 161;
            return stan::math::promote_scalar<fun_return_scalar_t__>(b);
        }
        current_statement_begin__ = 162;
        if (as_bool(logical_eq(x, 3))) {
            current_statement_begin__ = 162;
            return stan::math::promote_scalar<fun_return_scalar_t__>(c);
        } else {
            current_statement_begin__ = 163;
            return stan::math::promote_scalar<fun_return_scalar_t__>(d);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}
struct which_functor__ {
    template <typename T1__, typename T2__, typename T3__, typename T4__>
        std::vector<Eigen::Matrix<typename boost::math::tools::promote_args<T1__, T2__, T3__, T4__>::type, Eigen::Dynamic, 1> >
    operator()(const int& x,
          const std::vector<Eigen::Matrix<T1__, Eigen::Dynamic, 1> >& a,
          const std::vector<Eigen::Matrix<T2__, Eigen::Dynamic, 1> >& b,
          const std::vector<Eigen::Matrix<T3__, Eigen::Dynamic, 1> >& c,
          const std::vector<Eigen::Matrix<T4__, Eigen::Dynamic, 1> >& d, std::ostream* pstream__) const {
        return which(x, a, b, c, d, pstream__);
    }
};
#include <stan_meta_header.hpp>
class model_ARMET_ref : public prob_grad {
private:
        int shards;
        int G;
        int GM;
        int S;
        int CL;
        std::vector<int> counts_linear;
        std::vector<int> G_to_counts_linear;
        std::vector<int> S_linear;
        std::vector<int> size_counts_idx_lv_MPI;
        std::vector<std::vector<int> > counts_idx_lv_MPI;
        std::vector<int> size_counts_G_lv_MPI;
        std::vector<int> size_counts_S_lv_MPI;
        std::vector<std::vector<int> > counts_G_lv_MPI;
        std::vector<std::vector<int> > counts_S_lv_MPI;
        std::vector<int> size_G_linear_MPI;
        std::vector<std::vector<int> > G_linear_MPI;
        std::vector<int> size_counts_G_lv_MPI_non_redundant;
        std::vector<std::vector<int> > counts_G_lv_MPI_non_redundant;
        std::vector<std::vector<int> > counts_G_lv_MPI_non_redundant_reps;
        std::vector<double> lambda_mu_prior;
        std::vector<double> lambda_sigma_prior;
        std::vector<double> lambda_skew_prior;
        std::vector<double> sigma_intercept_prior;
        std::vector<std::vector<double> > real_data;
        std::vector<std::vector<double> > real_data2;
public:
    model_ARMET_ref(stan::io::var_context& context__,
        std::ostream* pstream__ = 0)
        : prob_grad(0) {
        ctor_body(context__, 0, pstream__);
    }
    model_ARMET_ref(stan::io::var_context& context__,
        unsigned int random_seed__,
        std::ostream* pstream__ = 0)
        : prob_grad(0) {
        ctor_body(context__, random_seed__, pstream__);
    }
    void ctor_body(stan::io::var_context& context__,
                   unsigned int random_seed__,
                   std::ostream* pstream__) {
        typedef double local_scalar_t__;
        boost::ecuyer1988 base_rng__ =
          stan::services::util::create_rng(random_seed__, 0);
        (void) base_rng__;  // suppress unused var warning
        current_statement_begin__ = -1;
        static const char* function__ = "model_ARMET_ref_namespace::model_ARMET_ref";
        (void) function__;  // dummy to suppress unused var warning
        size_t pos__;
        (void) pos__;  // dummy to suppress unused var warning
        std::vector<int> vals_i__;
        std::vector<double> vals_r__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
        try {
            // initialize data block variables from context__
            current_statement_begin__ = 170;
            context__.validate_dims("data initialization", "shards", "int", context__.to_vec());
            shards = int(0);
            vals_i__ = context__.vals_i("shards");
            pos__ = 0;
            shards = vals_i__[pos__++];
            check_greater_or_equal(function__, "shards", shards, 1);
            current_statement_begin__ = 173;
            context__.validate_dims("data initialization", "G", "int", context__.to_vec());
            G = int(0);
            vals_i__ = context__.vals_i("G");
            pos__ = 0;
            G = vals_i__[pos__++];
            check_greater_or_equal(function__, "G", G, 0);
            current_statement_begin__ = 174;
            context__.validate_dims("data initialization", "GM", "int", context__.to_vec());
            GM = int(0);
            vals_i__ = context__.vals_i("GM");
            pos__ = 0;
            GM = vals_i__[pos__++];
            check_greater_or_equal(function__, "GM", GM, 0);
            current_statement_begin__ = 175;
            context__.validate_dims("data initialization", "S", "int", context__.to_vec());
            S = int(0);
            vals_i__ = context__.vals_i("S");
            pos__ = 0;
            S = vals_i__[pos__++];
            check_greater_or_equal(function__, "S", S, 0);
            current_statement_begin__ = 176;
            context__.validate_dims("data initialization", "CL", "int", context__.to_vec());
            CL = int(0);
            vals_i__ = context__.vals_i("CL");
            pos__ = 0;
            CL = vals_i__[pos__++];
            current_statement_begin__ = 179;
            validate_non_negative_index("counts_linear", "CL", CL);
            context__.validate_dims("data initialization", "counts_linear", "int", context__.to_vec(CL));
            counts_linear = std::vector<int>(CL, int(0));
            vals_i__ = context__.vals_i("counts_linear");
            pos__ = 0;
            size_t counts_linear_k_0_max__ = CL;
            for (size_t k_0__ = 0; k_0__ < counts_linear_k_0_max__; ++k_0__) {
                counts_linear[k_0__] = vals_i__[pos__++];
            }
            size_t counts_linear_i_0_max__ = CL;
            for (size_t i_0__ = 0; i_0__ < counts_linear_i_0_max__; ++i_0__) {
                check_greater_or_equal(function__, "counts_linear[i_0__]", counts_linear[i_0__], 0);
            }
            current_statement_begin__ = 180;
            validate_non_negative_index("G_to_counts_linear", "CL", CL);
            context__.validate_dims("data initialization", "G_to_counts_linear", "int", context__.to_vec(CL));
            G_to_counts_linear = std::vector<int>(CL, int(0));
            vals_i__ = context__.vals_i("G_to_counts_linear");
            pos__ = 0;
            size_t G_to_counts_linear_k_0_max__ = CL;
            for (size_t k_0__ = 0; k_0__ < G_to_counts_linear_k_0_max__; ++k_0__) {
                G_to_counts_linear[k_0__] = vals_i__[pos__++];
            }
            current_statement_begin__ = 181;
            validate_non_negative_index("S_linear", "CL", CL);
            context__.validate_dims("data initialization", "S_linear", "int", context__.to_vec(CL));
            S_linear = std::vector<int>(CL, int(0));
            vals_i__ = context__.vals_i("S_linear");
            pos__ = 0;
            size_t S_linear_k_0_max__ = CL;
            for (size_t k_0__ = 0; k_0__ < S_linear_k_0_max__; ++k_0__) {
                S_linear[k_0__] = vals_i__[pos__++];
            }
            current_statement_begin__ = 184;
            validate_non_negative_index("size_counts_idx_lv_MPI", "std::max(shards, 1)", std::max(shards, 1));
            context__.validate_dims("data initialization", "size_counts_idx_lv_MPI", "int", context__.to_vec(std::max(shards, 1)));
            size_counts_idx_lv_MPI = std::vector<int>(std::max(shards, 1), int(0));
            vals_i__ = context__.vals_i("size_counts_idx_lv_MPI");
            pos__ = 0;
            size_t size_counts_idx_lv_MPI_k_0_max__ = std::max(shards, 1);
            for (size_t k_0__ = 0; k_0__ < size_counts_idx_lv_MPI_k_0_max__; ++k_0__) {
                size_counts_idx_lv_MPI[k_0__] = vals_i__[pos__++];
            }
            size_t size_counts_idx_lv_MPI_i_0_max__ = std::max(shards, 1);
            for (size_t i_0__ = 0; i_0__ < size_counts_idx_lv_MPI_i_0_max__; ++i_0__) {
                check_greater_or_equal(function__, "size_counts_idx_lv_MPI[i_0__]", size_counts_idx_lv_MPI[i_0__], 0);
            }
            current_statement_begin__ = 185;
            validate_non_negative_index("counts_idx_lv_MPI", "shards", shards);
            validate_non_negative_index("counts_idx_lv_MPI", "max(size_counts_idx_lv_MPI)", max(size_counts_idx_lv_MPI));
            context__.validate_dims("data initialization", "counts_idx_lv_MPI", "int", context__.to_vec(shards,max(size_counts_idx_lv_MPI)));
            counts_idx_lv_MPI = std::vector<std::vector<int> >(shards, std::vector<int>(max(size_counts_idx_lv_MPI), int(0)));
            vals_i__ = context__.vals_i("counts_idx_lv_MPI");
            pos__ = 0;
            size_t counts_idx_lv_MPI_k_0_max__ = shards;
            size_t counts_idx_lv_MPI_k_1_max__ = max(size_counts_idx_lv_MPI);
            for (size_t k_1__ = 0; k_1__ < counts_idx_lv_MPI_k_1_max__; ++k_1__) {
                for (size_t k_0__ = 0; k_0__ < counts_idx_lv_MPI_k_0_max__; ++k_0__) {
                    counts_idx_lv_MPI[k_0__][k_1__] = vals_i__[pos__++];
                }
            }
            current_statement_begin__ = 186;
            validate_non_negative_index("size_counts_G_lv_MPI", "std::max(shards, 1)", std::max(shards, 1));
            context__.validate_dims("data initialization", "size_counts_G_lv_MPI", "int", context__.to_vec(std::max(shards, 1)));
            size_counts_G_lv_MPI = std::vector<int>(std::max(shards, 1), int(0));
            vals_i__ = context__.vals_i("size_counts_G_lv_MPI");
            pos__ = 0;
            size_t size_counts_G_lv_MPI_k_0_max__ = std::max(shards, 1);
            for (size_t k_0__ = 0; k_0__ < size_counts_G_lv_MPI_k_0_max__; ++k_0__) {
                size_counts_G_lv_MPI[k_0__] = vals_i__[pos__++];
            }
            current_statement_begin__ = 187;
            validate_non_negative_index("size_counts_S_lv_MPI", "std::max(shards, 1)", std::max(shards, 1));
            context__.validate_dims("data initialization", "size_counts_S_lv_MPI", "int", context__.to_vec(std::max(shards, 1)));
            size_counts_S_lv_MPI = std::vector<int>(std::max(shards, 1), int(0));
            vals_i__ = context__.vals_i("size_counts_S_lv_MPI");
            pos__ = 0;
            size_t size_counts_S_lv_MPI_k_0_max__ = std::max(shards, 1);
            for (size_t k_0__ = 0; k_0__ < size_counts_S_lv_MPI_k_0_max__; ++k_0__) {
                size_counts_S_lv_MPI[k_0__] = vals_i__[pos__++];
            }
            current_statement_begin__ = 188;
            validate_non_negative_index("counts_G_lv_MPI", "shards", shards);
            validate_non_negative_index("counts_G_lv_MPI", "max(size_counts_G_lv_MPI)", max(size_counts_G_lv_MPI));
            context__.validate_dims("data initialization", "counts_G_lv_MPI", "int", context__.to_vec(shards,max(size_counts_G_lv_MPI)));
            counts_G_lv_MPI = std::vector<std::vector<int> >(shards, std::vector<int>(max(size_counts_G_lv_MPI), int(0)));
            vals_i__ = context__.vals_i("counts_G_lv_MPI");
            pos__ = 0;
            size_t counts_G_lv_MPI_k_0_max__ = shards;
            size_t counts_G_lv_MPI_k_1_max__ = max(size_counts_G_lv_MPI);
            for (size_t k_1__ = 0; k_1__ < counts_G_lv_MPI_k_1_max__; ++k_1__) {
                for (size_t k_0__ = 0; k_0__ < counts_G_lv_MPI_k_0_max__; ++k_0__) {
                    counts_G_lv_MPI[k_0__][k_1__] = vals_i__[pos__++];
                }
            }
            current_statement_begin__ = 189;
            validate_non_negative_index("counts_S_lv_MPI", "shards", shards);
            validate_non_negative_index("counts_S_lv_MPI", "max(size_counts_S_lv_MPI)", max(size_counts_S_lv_MPI));
            context__.validate_dims("data initialization", "counts_S_lv_MPI", "int", context__.to_vec(shards,max(size_counts_S_lv_MPI)));
            counts_S_lv_MPI = std::vector<std::vector<int> >(shards, std::vector<int>(max(size_counts_S_lv_MPI), int(0)));
            vals_i__ = context__.vals_i("counts_S_lv_MPI");
            pos__ = 0;
            size_t counts_S_lv_MPI_k_0_max__ = shards;
            size_t counts_S_lv_MPI_k_1_max__ = max(size_counts_S_lv_MPI);
            for (size_t k_1__ = 0; k_1__ < counts_S_lv_MPI_k_1_max__; ++k_1__) {
                for (size_t k_0__ = 0; k_0__ < counts_S_lv_MPI_k_0_max__; ++k_0__) {
                    counts_S_lv_MPI[k_0__][k_1__] = vals_i__[pos__++];
                }
            }
            current_statement_begin__ = 190;
            validate_non_negative_index("size_G_linear_MPI", "std::max(shards, 1)", std::max(shards, 1));
            context__.validate_dims("data initialization", "size_G_linear_MPI", "int", context__.to_vec(std::max(shards, 1)));
            size_G_linear_MPI = std::vector<int>(std::max(shards, 1), int(0));
            vals_i__ = context__.vals_i("size_G_linear_MPI");
            pos__ = 0;
            size_t size_G_linear_MPI_k_0_max__ = std::max(shards, 1);
            for (size_t k_0__ = 0; k_0__ < size_G_linear_MPI_k_0_max__; ++k_0__) {
                size_G_linear_MPI[k_0__] = vals_i__[pos__++];
            }
            current_statement_begin__ = 191;
            validate_non_negative_index("G_linear_MPI", "shards", shards);
            validate_non_negative_index("G_linear_MPI", "max(size_G_linear_MPI)", max(size_G_linear_MPI));
            context__.validate_dims("data initialization", "G_linear_MPI", "int", context__.to_vec(shards,max(size_G_linear_MPI)));
            G_linear_MPI = std::vector<std::vector<int> >(shards, std::vector<int>(max(size_G_linear_MPI), int(0)));
            vals_i__ = context__.vals_i("G_linear_MPI");
            pos__ = 0;
            size_t G_linear_MPI_k_0_max__ = shards;
            size_t G_linear_MPI_k_1_max__ = max(size_G_linear_MPI);
            for (size_t k_1__ = 0; k_1__ < G_linear_MPI_k_1_max__; ++k_1__) {
                for (size_t k_0__ = 0; k_0__ < G_linear_MPI_k_0_max__; ++k_0__) {
                    G_linear_MPI[k_0__][k_1__] = vals_i__[pos__++];
                }
            }
            current_statement_begin__ = 192;
            validate_non_negative_index("size_counts_G_lv_MPI_non_redundant", "std::max(shards, 1)", std::max(shards, 1));
            context__.validate_dims("data initialization", "size_counts_G_lv_MPI_non_redundant", "int", context__.to_vec(std::max(shards, 1)));
            size_counts_G_lv_MPI_non_redundant = std::vector<int>(std::max(shards, 1), int(0));
            vals_i__ = context__.vals_i("size_counts_G_lv_MPI_non_redundant");
            pos__ = 0;
            size_t size_counts_G_lv_MPI_non_redundant_k_0_max__ = std::max(shards, 1);
            for (size_t k_0__ = 0; k_0__ < size_counts_G_lv_MPI_non_redundant_k_0_max__; ++k_0__) {
                size_counts_G_lv_MPI_non_redundant[k_0__] = vals_i__[pos__++];
            }
            current_statement_begin__ = 193;
            validate_non_negative_index("counts_G_lv_MPI_non_redundant", "shards", shards);
            validate_non_negative_index("counts_G_lv_MPI_non_redundant", "max(size_counts_G_lv_MPI_non_redundant)", max(size_counts_G_lv_MPI_non_redundant));
            context__.validate_dims("data initialization", "counts_G_lv_MPI_non_redundant", "int", context__.to_vec(shards,max(size_counts_G_lv_MPI_non_redundant)));
            counts_G_lv_MPI_non_redundant = std::vector<std::vector<int> >(shards, std::vector<int>(max(size_counts_G_lv_MPI_non_redundant), int(0)));
            vals_i__ = context__.vals_i("counts_G_lv_MPI_non_redundant");
            pos__ = 0;
            size_t counts_G_lv_MPI_non_redundant_k_0_max__ = shards;
            size_t counts_G_lv_MPI_non_redundant_k_1_max__ = max(size_counts_G_lv_MPI_non_redundant);
            for (size_t k_1__ = 0; k_1__ < counts_G_lv_MPI_non_redundant_k_1_max__; ++k_1__) {
                for (size_t k_0__ = 0; k_0__ < counts_G_lv_MPI_non_redundant_k_0_max__; ++k_0__) {
                    counts_G_lv_MPI_non_redundant[k_0__][k_1__] = vals_i__[pos__++];
                }
            }
            current_statement_begin__ = 194;
            validate_non_negative_index("counts_G_lv_MPI_non_redundant_reps", "shards", shards);
            validate_non_negative_index("counts_G_lv_MPI_non_redundant_reps", "max(size_counts_G_lv_MPI_non_redundant)", max(size_counts_G_lv_MPI_non_redundant));
            context__.validate_dims("data initialization", "counts_G_lv_MPI_non_redundant_reps", "int", context__.to_vec(shards,max(size_counts_G_lv_MPI_non_redundant)));
            counts_G_lv_MPI_non_redundant_reps = std::vector<std::vector<int> >(shards, std::vector<int>(max(size_counts_G_lv_MPI_non_redundant), int(0)));
            vals_i__ = context__.vals_i("counts_G_lv_MPI_non_redundant_reps");
            pos__ = 0;
            size_t counts_G_lv_MPI_non_redundant_reps_k_0_max__ = shards;
            size_t counts_G_lv_MPI_non_redundant_reps_k_1_max__ = max(size_counts_G_lv_MPI_non_redundant);
            for (size_t k_1__ = 0; k_1__ < counts_G_lv_MPI_non_redundant_reps_k_1_max__; ++k_1__) {
                for (size_t k_0__ = 0; k_0__ < counts_G_lv_MPI_non_redundant_reps_k_0_max__; ++k_0__) {
                    counts_G_lv_MPI_non_redundant_reps[k_0__][k_1__] = vals_i__[pos__++];
                }
            }
            current_statement_begin__ = 197;
            validate_non_negative_index("lambda_mu_prior", "2", 2);
            context__.validate_dims("data initialization", "lambda_mu_prior", "double", context__.to_vec(2));
            lambda_mu_prior = std::vector<double>(2, double(0));
            vals_r__ = context__.vals_r("lambda_mu_prior");
            pos__ = 0;
            size_t lambda_mu_prior_k_0_max__ = 2;
            for (size_t k_0__ = 0; k_0__ < lambda_mu_prior_k_0_max__; ++k_0__) {
                lambda_mu_prior[k_0__] = vals_r__[pos__++];
            }
            current_statement_begin__ = 198;
            validate_non_negative_index("lambda_sigma_prior", "2", 2);
            context__.validate_dims("data initialization", "lambda_sigma_prior", "double", context__.to_vec(2));
            lambda_sigma_prior = std::vector<double>(2, double(0));
            vals_r__ = context__.vals_r("lambda_sigma_prior");
            pos__ = 0;
            size_t lambda_sigma_prior_k_0_max__ = 2;
            for (size_t k_0__ = 0; k_0__ < lambda_sigma_prior_k_0_max__; ++k_0__) {
                lambda_sigma_prior[k_0__] = vals_r__[pos__++];
            }
            current_statement_begin__ = 199;
            validate_non_negative_index("lambda_skew_prior", "2", 2);
            context__.validate_dims("data initialization", "lambda_skew_prior", "double", context__.to_vec(2));
            lambda_skew_prior = std::vector<double>(2, double(0));
            vals_r__ = context__.vals_r("lambda_skew_prior");
            pos__ = 0;
            size_t lambda_skew_prior_k_0_max__ = 2;
            for (size_t k_0__ = 0; k_0__ < lambda_skew_prior_k_0_max__; ++k_0__) {
                lambda_skew_prior[k_0__] = vals_r__[pos__++];
            }
            current_statement_begin__ = 200;
            validate_non_negative_index("sigma_intercept_prior", "2", 2);
            context__.validate_dims("data initialization", "sigma_intercept_prior", "double", context__.to_vec(2));
            sigma_intercept_prior = std::vector<double>(2, double(0));
            vals_r__ = context__.vals_r("sigma_intercept_prior");
            pos__ = 0;
            size_t sigma_intercept_prior_k_0_max__ = 2;
            for (size_t k_0__ = 0; k_0__ < sigma_intercept_prior_k_0_max__; ++k_0__) {
                sigma_intercept_prior[k_0__] = vals_r__[pos__++];
            }
            // initialize transformed data variables
            current_statement_begin__ = 205;
            validate_non_negative_index("real_data", "shards", shards);
            validate_non_negative_index("real_data", "0", 0);
            real_data = std::vector<std::vector<double> >(shards, std::vector<double>(0, double(0)));
            stan::math::fill(real_data, DUMMY_VAR__);
            current_statement_begin__ = 206;
            validate_non_negative_index("real_data2", "shards", shards);
            validate_non_negative_index("real_data2", "0", 0);
            real_data2 = std::vector<std::vector<double> >(shards, std::vector<double>(0, double(0)));
            stan::math::fill(real_data2, DUMMY_VAR__);
            // execute transformed data statements
            // validate transformed data
            // validate, set parameter ranges
            num_params_r__ = 0U;
            param_ranges_i__.clear();
            current_statement_begin__ = 212;
            num_params_r__ += 1;
            current_statement_begin__ = 213;
            num_params_r__ += 1;
            current_statement_begin__ = 214;
            num_params_r__ += 1;
            current_statement_begin__ = 217;
            num_params_r__ += 1;
            current_statement_begin__ = 218;
            num_params_r__ += 1;
            current_statement_begin__ = 219;
            num_params_r__ += 1;
            current_statement_begin__ = 222;
            validate_non_negative_index("lambda_log", "G", G);
            num_params_r__ += G;
            current_statement_begin__ = 223;
            validate_non_negative_index("sigma_inv_log", "G", G);
            num_params_r__ += G;
            current_statement_begin__ = 224;
            validate_non_negative_index("exposure_rate_minus_1", "(S - 1)", (S - 1));
            num_params_r__ += (S - 1);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }
    ~model_ARMET_ref() { }
    void transform_inits(const stan::io::var_context& context__,
                         std::vector<int>& params_i__,
                         std::vector<double>& params_r__,
                         std::ostream* pstream__) const {
        typedef double local_scalar_t__;
        stan::io::writer<double> writer__(params_r__, params_i__);
        size_t pos__;
        (void) pos__; // dummy call to supress warning
        std::vector<double> vals_r__;
        std::vector<int> vals_i__;
        current_statement_begin__ = 212;
        if (!(context__.contains_r("lambda_mu")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable lambda_mu missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("lambda_mu");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "lambda_mu", "double", context__.to_vec());
        double lambda_mu(0);
        lambda_mu = vals_r__[pos__++];
        try {
            writer__.scalar_offset_multiplier_unconstrain(get_base1(lambda_mu_prior, 1, "lambda_mu_prior", 1), get_base1(lambda_mu_prior, 2, "lambda_mu_prior", 1), lambda_mu);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable lambda_mu: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 213;
        if (!(context__.contains_r("lambda_sigma")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable lambda_sigma missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("lambda_sigma");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "lambda_sigma", "double", context__.to_vec());
        double lambda_sigma(0);
        lambda_sigma = vals_r__[pos__++];
        try {
            writer__.scalar_offset_multiplier_unconstrain(get_base1(lambda_sigma_prior, 1, "lambda_sigma_prior", 1), get_base1(lambda_sigma_prior, 2, "lambda_sigma_prior", 1), lambda_sigma);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable lambda_sigma: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 214;
        if (!(context__.contains_r("lambda_skew")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable lambda_skew missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("lambda_skew");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "lambda_skew", "double", context__.to_vec());
        double lambda_skew(0);
        lambda_skew = vals_r__[pos__++];
        try {
            writer__.scalar_offset_multiplier_unconstrain(get_base1(lambda_skew_prior, 1, "lambda_skew_prior", 1), get_base1(lambda_skew_prior, 2, "lambda_skew_prior", 1), lambda_skew);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable lambda_skew: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 217;
        if (!(context__.contains_r("sigma_slope")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable sigma_slope missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("sigma_slope");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "sigma_slope", "double", context__.to_vec());
        double sigma_slope(0);
        sigma_slope = vals_r__[pos__++];
        try {
            writer__.scalar_ub_unconstrain(0, sigma_slope);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable sigma_slope: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 218;
        if (!(context__.contains_r("sigma_sigma")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable sigma_sigma missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("sigma_sigma");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "sigma_sigma", "double", context__.to_vec());
        double sigma_sigma(0);
        sigma_sigma = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(0, sigma_sigma);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable sigma_sigma: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 219;
        if (!(context__.contains_r("sigma_intercept")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable sigma_intercept missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("sigma_intercept");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "sigma_intercept", "double", context__.to_vec());
        double sigma_intercept(0);
        sigma_intercept = vals_r__[pos__++];
        try {
            writer__.scalar_offset_multiplier_unconstrain(get_base1(sigma_intercept_prior, 1, "sigma_intercept_prior", 1), get_base1(sigma_intercept_prior, 2, "sigma_intercept_prior", 1), sigma_intercept);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable sigma_intercept: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 222;
        if (!(context__.contains_r("lambda_log")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable lambda_log missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("lambda_log");
        pos__ = 0U;
        validate_non_negative_index("lambda_log", "G", G);
        context__.validate_dims("parameter initialization", "lambda_log", "vector_d", context__.to_vec(G));
        Eigen::Matrix<double, Eigen::Dynamic, 1> lambda_log(G);
        size_t lambda_log_j_1_max__ = G;
        for (size_t j_1__ = 0; j_1__ < lambda_log_j_1_max__; ++j_1__) {
            lambda_log(j_1__) = vals_r__[pos__++];
        }
        try {
            writer__.vector_unconstrain(lambda_log);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable lambda_log: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 223;
        if (!(context__.contains_r("sigma_inv_log")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable sigma_inv_log missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("sigma_inv_log");
        pos__ = 0U;
        validate_non_negative_index("sigma_inv_log", "G", G);
        context__.validate_dims("parameter initialization", "sigma_inv_log", "vector_d", context__.to_vec(G));
        Eigen::Matrix<double, Eigen::Dynamic, 1> sigma_inv_log(G);
        size_t sigma_inv_log_j_1_max__ = G;
        for (size_t j_1__ = 0; j_1__ < sigma_inv_log_j_1_max__; ++j_1__) {
            sigma_inv_log(j_1__) = vals_r__[pos__++];
        }
        try {
            writer__.vector_unconstrain(sigma_inv_log);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable sigma_inv_log: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 224;
        if (!(context__.contains_r("exposure_rate_minus_1")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable exposure_rate_minus_1 missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("exposure_rate_minus_1");
        pos__ = 0U;
        validate_non_negative_index("exposure_rate_minus_1", "(S - 1)", (S - 1));
        context__.validate_dims("parameter initialization", "exposure_rate_minus_1", "vector_d", context__.to_vec((S - 1)));
        Eigen::Matrix<double, Eigen::Dynamic, 1> exposure_rate_minus_1((S - 1));
        size_t exposure_rate_minus_1_j_1_max__ = (S - 1);
        for (size_t j_1__ = 0; j_1__ < exposure_rate_minus_1_j_1_max__; ++j_1__) {
            exposure_rate_minus_1(j_1__) = vals_r__[pos__++];
        }
        try {
            writer__.vector_unconstrain(exposure_rate_minus_1);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable exposure_rate_minus_1: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        params_r__ = writer__.data_r();
        params_i__ = writer__.data_i();
    }
    void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double, Eigen::Dynamic, 1>& params_r,
                         std::ostream* pstream__) const {
      std::vector<double> params_r_vec;
      std::vector<int> params_i_vec;
      transform_inits(context, params_i_vec, params_r_vec, pstream__);
      params_r.resize(params_r_vec.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r(i) = params_r_vec[i];
    }
    template <bool propto__, bool jacobian__, typename T__>
    T__ log_prob(std::vector<T__>& params_r__,
                 std::vector<int>& params_i__,
                 std::ostream* pstream__ = 0) const {
        typedef T__ local_scalar_t__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // dummy to suppress unused var warning
        T__ lp__(0.0);
        stan::math::accumulator<T__> lp_accum__;
        try {
            stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
            // model parameters
            current_statement_begin__ = 212;
            local_scalar_t__ lambda_mu;
            (void) lambda_mu;  // dummy to suppress unused var warning
            if (jacobian__)
                lambda_mu = in__.scalar_offset_multiplier_constrain(get_base1(lambda_mu_prior, 1, "lambda_mu_prior", 1), get_base1(lambda_mu_prior, 2, "lambda_mu_prior", 1), lp__);
            else
                lambda_mu = in__.scalar_offset_multiplier_constrain(get_base1(lambda_mu_prior, 1, "lambda_mu_prior", 1), get_base1(lambda_mu_prior, 2, "lambda_mu_prior", 1));
            current_statement_begin__ = 213;
            local_scalar_t__ lambda_sigma;
            (void) lambda_sigma;  // dummy to suppress unused var warning
            if (jacobian__)
                lambda_sigma = in__.scalar_offset_multiplier_constrain(get_base1(lambda_sigma_prior, 1, "lambda_sigma_prior", 1), get_base1(lambda_sigma_prior, 2, "lambda_sigma_prior", 1), lp__);
            else
                lambda_sigma = in__.scalar_offset_multiplier_constrain(get_base1(lambda_sigma_prior, 1, "lambda_sigma_prior", 1), get_base1(lambda_sigma_prior, 2, "lambda_sigma_prior", 1));
            current_statement_begin__ = 214;
            local_scalar_t__ lambda_skew;
            (void) lambda_skew;  // dummy to suppress unused var warning
            if (jacobian__)
                lambda_skew = in__.scalar_offset_multiplier_constrain(get_base1(lambda_skew_prior, 1, "lambda_skew_prior", 1), get_base1(lambda_skew_prior, 2, "lambda_skew_prior", 1), lp__);
            else
                lambda_skew = in__.scalar_offset_multiplier_constrain(get_base1(lambda_skew_prior, 1, "lambda_skew_prior", 1), get_base1(lambda_skew_prior, 2, "lambda_skew_prior", 1));
            current_statement_begin__ = 217;
            local_scalar_t__ sigma_slope;
            (void) sigma_slope;  // dummy to suppress unused var warning
            if (jacobian__)
                sigma_slope = in__.scalar_ub_constrain(0, lp__);
            else
                sigma_slope = in__.scalar_ub_constrain(0);
            current_statement_begin__ = 218;
            local_scalar_t__ sigma_sigma;
            (void) sigma_sigma;  // dummy to suppress unused var warning
            if (jacobian__)
                sigma_sigma = in__.scalar_lb_constrain(0, lp__);
            else
                sigma_sigma = in__.scalar_lb_constrain(0);
            current_statement_begin__ = 219;
            local_scalar_t__ sigma_intercept;
            (void) sigma_intercept;  // dummy to suppress unused var warning
            if (jacobian__)
                sigma_intercept = in__.scalar_offset_multiplier_constrain(get_base1(sigma_intercept_prior, 1, "sigma_intercept_prior", 1), get_base1(sigma_intercept_prior, 2, "sigma_intercept_prior", 1), lp__);
            else
                sigma_intercept = in__.scalar_offset_multiplier_constrain(get_base1(sigma_intercept_prior, 1, "sigma_intercept_prior", 1), get_base1(sigma_intercept_prior, 2, "sigma_intercept_prior", 1));
            current_statement_begin__ = 222;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> lambda_log;
            (void) lambda_log;  // dummy to suppress unused var warning
            if (jacobian__)
                lambda_log = in__.vector_constrain(G, lp__);
            else
                lambda_log = in__.vector_constrain(G);
            current_statement_begin__ = 223;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> sigma_inv_log;
            (void) sigma_inv_log;  // dummy to suppress unused var warning
            if (jacobian__)
                sigma_inv_log = in__.vector_constrain(G, lp__);
            else
                sigma_inv_log = in__.vector_constrain(G);
            current_statement_begin__ = 224;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> exposure_rate_minus_1;
            (void) exposure_rate_minus_1;  // dummy to suppress unused var warning
            if (jacobian__)
                exposure_rate_minus_1 = in__.vector_constrain((S - 1), lp__);
            else
                exposure_rate_minus_1 = in__.vector_constrain((S - 1));
            // transformed parameters
            current_statement_begin__ = 230;
            validate_non_negative_index("exposure_rate", "S", S);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> exposure_rate(S);
            stan::math::initialize(exposure_rate, DUMMY_VAR__);
            stan::math::fill(exposure_rate, DUMMY_VAR__);
            stan::math::assign(exposure_rate,append_row(exposure_rate_minus_1, -(sum(exposure_rate_minus_1))));
            // validate transformed parameters
            const char* function__ = "validate transformed params";
            (void) function__;  // dummy to suppress unused var warning
            current_statement_begin__ = 230;
            size_t exposure_rate_j_1_max__ = S;
            for (size_t j_1__ = 0; j_1__ < exposure_rate_j_1_max__; ++j_1__) {
                if (stan::math::is_uninitialized(exposure_rate(j_1__))) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: exposure_rate" << "(" << j_1__ << ")";
                    stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable exposure_rate: ") + msg__.str()), current_statement_begin__, prog_reader__());
                }
            }
            // model body
            current_statement_begin__ = 236;
            lp_accum__.add(normal_log<propto__>(lambda_mu, get_base1(lambda_mu_prior, 1, "lambda_mu_prior", 1), get_base1(lambda_mu_prior, 2, "lambda_mu_prior", 1)));
            current_statement_begin__ = 237;
            lp_accum__.add(normal_log<propto__>(lambda_sigma, get_base1(lambda_sigma_prior, 1, "lambda_sigma_prior", 1), get_base1(lambda_sigma_prior, 2, "lambda_sigma_prior", 1)));
            current_statement_begin__ = 238;
            lp_accum__.add(normal_log<propto__>(lambda_skew, get_base1(lambda_skew_prior, 1, "lambda_skew_prior", 1), get_base1(lambda_skew_prior, 2, "lambda_skew_prior", 1)));
            current_statement_begin__ = 240;
            lp_accum__.add(normal_log<propto__>(sigma_intercept, 0, 2));
            current_statement_begin__ = 241;
            lp_accum__.add(normal_log<propto__>(sigma_slope, 0, 2));
            current_statement_begin__ = 242;
            lp_accum__.add(normal_log<propto__>(sigma_sigma, 0, 2));
            current_statement_begin__ = 245;
            lp_accum__.add(normal_log<propto__>(exposure_rate_minus_1, 0, 1));
            current_statement_begin__ = 248;
            lp_accum__.add(skew_normal_log<propto__>(lambda_log, lambda_mu, stan::math::exp(lambda_sigma), lambda_skew));
            current_statement_begin__ = 249;
            lp_accum__.add(normal_log<propto__>(sigma_inv_log, add(multiply(sigma_slope, lambda_log), sigma_intercept), sigma_sigma));
            current_statement_begin__ = 251;
            lp_accum__.add(sum(map_rect<3, lp_reduce_simple_functor__>(transpose(stan::math::to_row_vector(stan::math::array_builder<local_scalar_t__ >().add(sigma_intercept).add(sigma_slope).array())), get_mu_sigma_vector_MPI(add(stan::model::rvalue(lambda_log, stan::model::cons_list(stan::model::index_multi(G_to_counts_linear), stan::model::nil_index_list()), "lambda_log"), stan::model::rvalue(exposure_rate, stan::model::cons_list(stan::model::index_multi(S_linear), stan::model::nil_index_list()), "exposure_rate")), stan::model::rvalue(sigma_inv_log, stan::model::cons_list(stan::model::index_multi(G_to_counts_linear), stan::model::nil_index_list()), "sigma_inv_log"), shards, pstream__), real_data, get_int_MPI(counts_linear, shards, pstream__), pstream__)));
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
        lp_accum__.add(lp__);
        return lp_accum__.sum();
    } // log_prob()
    template <bool propto, bool jacobian, typename T_>
    T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
               std::ostream* pstream = 0) const {
      std::vector<T_> vec_params_r;
      vec_params_r.reserve(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        vec_params_r.push_back(params_r(i));
      std::vector<int> vec_params_i;
      return log_prob<propto,jacobian,T_>(vec_params_r, vec_params_i, pstream);
    }
    void get_param_names(std::vector<std::string>& names__) const {
        names__.resize(0);
        names__.push_back("lambda_mu");
        names__.push_back("lambda_sigma");
        names__.push_back("lambda_skew");
        names__.push_back("sigma_slope");
        names__.push_back("sigma_sigma");
        names__.push_back("sigma_intercept");
        names__.push_back("lambda_log");
        names__.push_back("sigma_inv_log");
        names__.push_back("exposure_rate_minus_1");
        names__.push_back("exposure_rate");
    }
    void get_dims(std::vector<std::vector<size_t> >& dimss__) const {
        dimss__.resize(0);
        std::vector<size_t> dims__;
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(G);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(G);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back((S - 1));
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(S);
        dimss__.push_back(dims__);
    }
    template <typename RNG>
    void write_array(RNG& base_rng__,
                     std::vector<double>& params_r__,
                     std::vector<int>& params_i__,
                     std::vector<double>& vars__,
                     bool include_tparams__ = true,
                     bool include_gqs__ = true,
                     std::ostream* pstream__ = 0) const {
        typedef double local_scalar_t__;
        vars__.resize(0);
        stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
        static const char* function__ = "model_ARMET_ref_namespace::write_array";
        (void) function__;  // dummy to suppress unused var warning
        // read-transform, write parameters
        double lambda_mu = in__.scalar_offset_multiplier_constrain(get_base1(lambda_mu_prior, 1, "lambda_mu_prior", 1), get_base1(lambda_mu_prior, 2, "lambda_mu_prior", 1));
        vars__.push_back(lambda_mu);
        double lambda_sigma = in__.scalar_offset_multiplier_constrain(get_base1(lambda_sigma_prior, 1, "lambda_sigma_prior", 1), get_base1(lambda_sigma_prior, 2, "lambda_sigma_prior", 1));
        vars__.push_back(lambda_sigma);
        double lambda_skew = in__.scalar_offset_multiplier_constrain(get_base1(lambda_skew_prior, 1, "lambda_skew_prior", 1), get_base1(lambda_skew_prior, 2, "lambda_skew_prior", 1));
        vars__.push_back(lambda_skew);
        double sigma_slope = in__.scalar_ub_constrain(0);
        vars__.push_back(sigma_slope);
        double sigma_sigma = in__.scalar_lb_constrain(0);
        vars__.push_back(sigma_sigma);
        double sigma_intercept = in__.scalar_offset_multiplier_constrain(get_base1(sigma_intercept_prior, 1, "sigma_intercept_prior", 1), get_base1(sigma_intercept_prior, 2, "sigma_intercept_prior", 1));
        vars__.push_back(sigma_intercept);
        Eigen::Matrix<double, Eigen::Dynamic, 1> lambda_log = in__.vector_constrain(G);
        size_t lambda_log_j_1_max__ = G;
        for (size_t j_1__ = 0; j_1__ < lambda_log_j_1_max__; ++j_1__) {
            vars__.push_back(lambda_log(j_1__));
        }
        Eigen::Matrix<double, Eigen::Dynamic, 1> sigma_inv_log = in__.vector_constrain(G);
        size_t sigma_inv_log_j_1_max__ = G;
        for (size_t j_1__ = 0; j_1__ < sigma_inv_log_j_1_max__; ++j_1__) {
            vars__.push_back(sigma_inv_log(j_1__));
        }
        Eigen::Matrix<double, Eigen::Dynamic, 1> exposure_rate_minus_1 = in__.vector_constrain((S - 1));
        size_t exposure_rate_minus_1_j_1_max__ = (S - 1);
        for (size_t j_1__ = 0; j_1__ < exposure_rate_minus_1_j_1_max__; ++j_1__) {
            vars__.push_back(exposure_rate_minus_1(j_1__));
        }
        double lp__ = 0.0;
        (void) lp__;  // dummy to suppress unused var warning
        stan::math::accumulator<double> lp_accum__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
        if (!include_tparams__ && !include_gqs__) return;
        try {
            // declare and define transformed parameters
            current_statement_begin__ = 230;
            validate_non_negative_index("exposure_rate", "S", S);
            Eigen::Matrix<double, Eigen::Dynamic, 1> exposure_rate(S);
            stan::math::initialize(exposure_rate, DUMMY_VAR__);
            stan::math::fill(exposure_rate, DUMMY_VAR__);
            stan::math::assign(exposure_rate,append_row(exposure_rate_minus_1, -(sum(exposure_rate_minus_1))));
            if (!include_gqs__ && !include_tparams__) return;
            // validate transformed parameters
            const char* function__ = "validate transformed params";
            (void) function__;  // dummy to suppress unused var warning
            // write transformed parameters
            if (include_tparams__) {
                size_t exposure_rate_j_1_max__ = S;
                for (size_t j_1__ = 0; j_1__ < exposure_rate_j_1_max__; ++j_1__) {
                    vars__.push_back(exposure_rate(j_1__));
                }
            }
            if (!include_gqs__) return;
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }
    template <typename RNG>
    void write_array(RNG& base_rng,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                     bool include_tparams = true,
                     bool include_gqs = true,
                     std::ostream* pstream = 0) const {
      std::vector<double> params_r_vec(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r_vec[i] = params_r(i);
      std::vector<double> vars_vec;
      std::vector<int> params_i_vec;
      write_array(base_rng, params_r_vec, params_i_vec, vars_vec, include_tparams, include_gqs, pstream);
      vars.resize(vars_vec.size());
      for (int i = 0; i < vars.size(); ++i)
        vars(i) = vars_vec[i];
    }
    static std::string model_name() {
        return "model_ARMET_ref";
    }
    void constrained_param_names(std::vector<std::string>& param_names__,
                                 bool include_tparams__ = true,
                                 bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        param_name_stream__.str(std::string());
        param_name_stream__ << "lambda_mu";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "lambda_sigma";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "lambda_skew";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "sigma_slope";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "sigma_sigma";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "sigma_intercept";
        param_names__.push_back(param_name_stream__.str());
        size_t lambda_log_j_1_max__ = G;
        for (size_t j_1__ = 0; j_1__ < lambda_log_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "lambda_log" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t sigma_inv_log_j_1_max__ = G;
        for (size_t j_1__ = 0; j_1__ < sigma_inv_log_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "sigma_inv_log" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t exposure_rate_minus_1_j_1_max__ = (S - 1);
        for (size_t j_1__ = 0; j_1__ < exposure_rate_minus_1_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "exposure_rate_minus_1" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        if (!include_gqs__ && !include_tparams__) return;
        if (include_tparams__) {
            size_t exposure_rate_j_1_max__ = S;
            for (size_t j_1__ = 0; j_1__ < exposure_rate_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "exposure_rate" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        if (!include_gqs__) return;
    }
    void unconstrained_param_names(std::vector<std::string>& param_names__,
                                   bool include_tparams__ = true,
                                   bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        param_name_stream__.str(std::string());
        param_name_stream__ << "lambda_mu";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "lambda_sigma";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "lambda_skew";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "sigma_slope";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "sigma_sigma";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "sigma_intercept";
        param_names__.push_back(param_name_stream__.str());
        size_t lambda_log_j_1_max__ = G;
        for (size_t j_1__ = 0; j_1__ < lambda_log_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "lambda_log" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t sigma_inv_log_j_1_max__ = G;
        for (size_t j_1__ = 0; j_1__ < sigma_inv_log_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "sigma_inv_log" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t exposure_rate_minus_1_j_1_max__ = (S - 1);
        for (size_t j_1__ = 0; j_1__ < exposure_rate_minus_1_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "exposure_rate_minus_1" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        if (!include_gqs__ && !include_tparams__) return;
        if (include_tparams__) {
            size_t exposure_rate_j_1_max__ = S;
            for (size_t j_1__ = 0; j_1__ < exposure_rate_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "exposure_rate" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        if (!include_gqs__) return;
    }
}; // model
}  // namespace
typedef model_ARMET_ref_namespace::model_ARMET_ref stan_model;
STAN_REGISTER_MAP_RECT(1, model_ARMET_ref_namespace::lp_reduce_simple_functor__)
STAN_REGISTER_MAP_RECT(2, model_ARMET_ref_namespace::lp_reduce_functor__)
STAN_REGISTER_MAP_RECT(3, model_ARMET_ref_namespace::lp_reduce_simple_functor__)
#endif
